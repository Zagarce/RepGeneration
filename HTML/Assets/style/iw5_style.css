
/* 
    Enfoque de diseño basado en sistemas para establecer reglas y patrones escalables y reutilizables.
    Se personalizan variables para acceder a cualquier valor de una propiedad mediante la pseudoclase ":root" con la sintaxis --nombre-variable 
    */
@import url('https://fonts.googleapis.com/css2?family=Lato:wght@100;300&family=Raleway:wght@200&family=Roboto:ital,wght@0,100;0,500;1,400&display=swap');


:root{
    /* Nombre de variable */
    --font-primary:'Raleway';
    --font-secundary: ;
    --color-primary: #46C1DB;
    --color-secundary: #9866de;
    --color-text-primary: #4a979b;
    --color-text-secundary: #7e7ee0;
    --color-background: #427c30;
    --color-light: rgb(243, 223, 223);
    --color-dark: rgb(30, 0, 0);
    }

body{
    
    font-family: var(--font-primary);
    background-color: var(--color-background);
    color: var(--color-dark);
    font-weight: 900;
}


.position{
    width: 100px;
    height: 100px;
    background-color: var(--color-dark);
    border: solid var(--color-dark) 2px;
}

/* La posición estática es la posición por default de HTML. No se afecta por los atributos top, bottom, left, right de ningún tipo */
#static{
    position:static;
    
    top: 20px;
    left: 20px;
    background-color: var(--color-primary);
 /* Propiedades para centrar display: grid/flex */
    display:flex;
    justify-content: center;
    align-items: center; 
}

/* Es posicionado de forma relativa al elemento anterior y sí permite movimiento mediante propiedades top, bottom, left, right */
#relative{
    position: relative;
    top: 700px;
    left: 0px;
    background-color: var(--color-secundary);
}

/* Se posiciona de forma absoluta respecto al viewport o su elemento ancestro/padre */
#absolute{
    position: absolute;
    background-color: var(--color-text-primary);
    top: 5px;
    left: 5px;
}

/* Ancestro respecto al cual se moverá el hijo */
#ancestro{
    position: absolute;
    top: 200px;
    width: 100px;
    height: 100px;
    background-color: var(--color-dark);
    border: solid var(--color-light);
}

/* Nos permite mantener el elemento de manera fija en el viewport (se mueve junto con el scroll) */
#fixed{
    position: fixed;
    top: 200px;
    left: 120px;
    background-color: var(--color-text-secundary);
    opacity: 75%;
}

#chat{
    position: fixed;
    
    background-color: var(--color-dark);
    border-radius: 50px;
    width: 100px;
    height: 100px;
    top: 500px;
    left: 200px;
    display: flex;
    align-items: center;
    justify-content: center;
}

#img_wa{
    position: relative;
    width: 90%;
}

.display-inline{
    
    width: 100px;
    height: 100px;
    background-color: var(--color-light);
    color: var(--color-text-primary);
    text-align: center;
    margin: 2px;
}

#display-1,#display-2 {
    /* Forza un formato de línea y los pone sobre el mismo renglón */
    display: inline;
}

.display-block{
    display:inline-block;
    width: 100px;
    height: 100px;
    background-color: #7e7ee0;
    text-align: center;
    margin: 2px;
}

@media (max-width: 720px){
    .display-none {
        display: none;}
        }
 
            /* FLEXBOX LAYOUT */

.container{
    /* Permite trabajar de manera flexible con elementos anidados dentro de un ancestro. 
    El flexbox se aplica en el container y tiene efecto sobre los hijos. 
    La dirección por default de flex es en fila 
    Vamos a poder acceder a diversas propiedades para modificar el comportamiento de los elementos
        -flex-direction: column, column-reverse, row, row-reverse
        -flex-wrap : wrap (respeta el formato original dentro del container), nowrap (los coloca en fila o columna), wrap-reverse
        -justify-content:space-around, space-between, end, start
        -align-items:  end, start, center 
        -align-self : flex-start, flex-end    */
    display: flex;
    flex-direction:row;
    flex-wrap: wrap;
    justify-content:space-around;
    align-items: center;
    width: auto;
    height: 350px;
    margin: 10px;
    padding: 15px;
    border-radius: 10px;
    background-color: var(--color-text-primary);
}

#item7{
    align-self:flex-end;
}

.display-flex {
    
    width: 100px;
    height: 80px;
    margin: 5px;
    padding: 2px;
    
    background-color: var(--color-primary);
    border-radius: 6px;
    display: flex;
    justify-content: center;
    align-items: center;    
}

a{ /* Propiedades visuales para los elementos <a> */
    text-decoration: none;
    color: var(--color-dark)
}

/* GRID LAYOUT */

.grid{
    display: grid;
    grid-template-columns: auto auto auto;
  
    gap: 20px;
    padding: 10px;

}


.display-grid{
    background-color: var(--color-primary);
    border-radius: 10px;
    padding: 25px;
    text-align: center;
    border: solid var(--color-background) 1px;
}

@media (max-width:2000px){
.container-1{
    display: grid;
    grid-template-columns: repeat(3,1fr);
    grid-template-rows: 0.5fr 1fr 2fr 1fr;
    grid-template-areas:
    "head head head"
    "section section section"
    "aside article article"
    "footer footer footer"
    ;

    width: auto;
    height: 500px;
    border: solid var(--color-text-primary) 0.7px;
    text-align: center;
    margin: 10px;
    font-size: 18px;
}
}
header {
    background-color:darkviolet;
    grid-area: head;
}

aside {
    background-color: seagreen;
    grid-area: aside;
}

section {
    background-color: peru;
    grid-area: section;
}

article {
    background-color: tomato;
    grid-area: article;
}

footer {
    background-color: deepskyblue;
    grid-area: footer;
}


